<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/mvc
	    http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.3.xsd">
    <context:property-placeholder location="classpath:db.properties"/>
    <!--数据源-->
    <bean id="db_dataSource_bean" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="url" value="${db.url}"/>
        <property name="driverClassName" value="${db.driver}"/>
        <property name="username" value="${db.username}"/>
        <property name="password" value="${db.password}"/>
        <property name="minIdle" value="${druid.minPoolSize}"/>
        <property name="maxActive" value="${druid.maxPoolSize}"/>
        <property name="initialSize" value="${druid.initialPoolSize}"/>
        <!--配置log4j，可查看SQL执行日志-->
        <!--<property name="filters" value="log4j"/>-->
    </bean>
    <!--log4j日志-->
    <bean id="sqlSessionFactory_bean" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="db_dataSource_bean"/>
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
    </bean>
    <bean id="mapper_bean" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory_bean"/>
        <property name="basePackage" value="org.example.mapper"/>
    </bean>

    <!-- 自动注册RequestMappingHandlerMapping与RequestMappingHandlerAdapter两个Bean，
        可将json字符串自动转为实体类 -->
    <mvc:annotation-driven><!--自动注册处理器映射器，处理器适配器-->
        <mvc:message-converters>
            <!-- @ResponseBody乱码问题，将StringHttpMessageConverter的默认编码设为UTF-8 -->
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <property name="supportedMediaTypes" value = "text/plain;charset=UTF-8" />
            </bean>
            <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                <property name="supportedMediaTypes">
                    <list>
                        <value>application/json;charset=UTF-8</value>
                        <value>text/html;charset=UTF-8</value>
                    </list>
                </property>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>
    <!--加载注解定义的bean-->
    <context:component-scan base-package="org.example.controller"/>
    <context:component-scan base-package="org.example.service"/>

    <!-- 声明多部分文件上传解析器 ，并对其属性进行注入 -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="maxUploadSize" value="10485760" /> <!-- 10485760上传最大容量 -->
        <property name="maxInMemorySize" value="4096" />
        <property name="defaultEncoding" value="UTF-8"/>  <!-- 编码方式 -->
    </bean>

    <!-- 当web.xml中url-pattern为"/"，使用WEB-INF保存动态资源时，静态资源映射-->
    <!--禁止过滤,允许静态资源放在任何地方-->
    <!--    <mvc:resources location="/res/" mapping="/res/**" cache-period="31556926"/>-->
    <mvc:resources location="/res/" mapping="/res/**" />
    <!-- 对模型视图名称的解析，即在模型视图名称添加前后缀 -->
    <!--<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"-->
    <!--p:prefix="/jsp/" p:suffix=".jsp"/>-->


    <mvc:interceptors>
        <mvc:interceptor>
            <!-- 匹配的是url路径， 如果不配置或/**,将拦截所有的Controller -->
            <mvc:mapping path="/**" />
            <mvc:exclude-mapping path="/user/register"/>
            <mvc:exclude-mapping path="/user/login"/>
            <mvc:exclude-mapping path="/user/changePassword"/>
            <mvc:exclude-mapping path="/user/updatePassword"/>
            <mvc:exclude-mapping path="/user/phone" />
            <mvc:exclude-mapping path="/res/**"/>
            <mvc:exclude-mapping path="/ValidateCode/image"/>
            <bean class="org.example.filter.TokenInterceptor"></bean>
        </mvc:interceptor>
        <!-- 当设置多个拦截器时，先按顺序调用preHandle方法，然后逆序调用每个拦截器的postHandle和afterCompletion方法 -->
    </mvc:interceptors>

</beans>